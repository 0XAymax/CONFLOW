generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id          String         @id @default(cuid())
  firstName   String
  lastName    String
  email       String         @unique
  role        UserRole       @default(USER)
  password    String
  affiliation String
  country     String
  isVerified  Boolean        @default(false)
  createdAt   DateTime       @default(now())
  inbox       Notification[]

  conferenceRoles ConferenceRoleEntries[]
  directSubmissions Submission[]
  authorEntries     SubmissionAuthor[] @relation("AuthorUser")
}

model Notification {
  id         String   @id @default(cuid())
  message    String
  title      String
  isRead     Boolean  @default(false)
  isArchived Boolean  @default(false)
  isDeleted  Boolean  @default(false)
  createdAt  DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

enum ConferenceStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

model Conference {
  id                  String           @id @default(cuid())
  title               String
  acronym             String           @unique
  description         String
  locationVenue       String
  locationCity        String
  locationCountry     String
  callForPapers       String
  websiteUrl          String?
  startDate           DateTime
  endDate             DateTime
  abstractDeadline    DateTime
  submissionDeadline  DateTime
  cameraReadyDeadline DateTime
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  status              ConferenceStatus @default(PENDING)
  isPublic            Boolean          @default(false)
  isDeleted           Boolean          @default(false)
  researchAreas       Json

  conferenceRoles ConferenceRoleEntries[]
  submissions     Submission[]
}

enum SubmissionStatus {
  DRAFT
  ACCEPTED
  REFUSED
  UNDER_REVIEW
  REVISION
}

model Submission {
  id                  String           @id @default(cuid())
  title               String
  abstract            String
  keywords            Json
  paperFilePath       String?
  paperFileName       String?
  cameraReadyFilepath String?
  cameraReadyFilename String?
  primaryArea         String
  secondaryArea       String
  status              SubmissionStatus @default(DRAFT)
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  conferenceId        String
  conference          Conference       @relation(fields: [conferenceId], references: [id])
  submittedById       String
  submittedBy         User             @relation(fields: [submittedById], references: [id])

  submissionAuthors SubmissionAuthor[]
}

model SubmissionAuthor {
  id              String     @id @default(cuid())
  firstName       String
  lastName        String
  email           String
  affiliation     String
  country         String
  submissionId    String
  submission      Submission @relation(fields: [submissionId], references: [id])
  isCorresponding Boolean
  createdAt       DateTime   @default(now())

  userId String?
  user   User?   @relation("AuthorUser", fields: [userId], references: [id])
  @@unique([submissionId, email]) // Ensure unique authors per submission by email
}

enum ConferenceRole {
  MAIN_CHAIR
  CHAIR
  REVIEWER
}

model ConferenceRoleEntries {
  id           String        @id @default(cuid())
  userId       String
  conferenceId String
  role         ConferenceRole
  createdAt    DateTime      @default(now())

  user       User       @relation(fields: [userId], references: [id])
  conference Conference @relation(fields: [conferenceId], references: [id])

  // Enforce unique role per user per conference
  @@unique([userId, conferenceId])
  @@index([conferenceId, role]) // For efficient role-based queries
}
