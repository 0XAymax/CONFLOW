generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  ADMIN
}

model User {
  id          String         @id @default(cuid())
  firstName   String
  lastName    String
  email       String         @unique
  role        UserRole       @default(USER)
  password    String
  affiliation String
  country     String
  isVerified  Boolean        @default(false)
  createdAt   DateTime       @default(now())
  inbox       Notification[]

  chairs     Conference[] @relation("ConferenceChairs")
  reviewers  Conference[] @relation("ConferenceReviewers")
  mainChairs Conference[] @relation("ConferenceMainChair")

  submissions Submission[]

  authorEntries SubmissonAuthor[] @relation("AuthorUser")
}

model Notification {
  id         String   @id @default(cuid())
  message    String
  title      String
  isRead     Boolean  @default(false)
  isArchived Boolean  @default(false)
  isDeleted  Boolean  @default(false)
  createdAt  DateTime @default(now())

  userId String
  user   User   @relation(fields: [userId], references: [id])
}

enum ConferenceStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

model Conference {
  id                  String           @id @default(cuid())
  title               String
  acronym             String           @unique
  description         String
  locationVenue       String
  locationCity        String
  locationCountry     String
  callForPapers       String //String for now, can be changed to JSON or Bytes if needed.
  websiteUrl          String?
  startDate           DateTime
  endDate             DateTime
  abstractDeadline    DateTime
  submissionDeadline  DateTime
  cameraReadyDeadline DateTime
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt
  status              ConferenceStatus @default(PENDING)
  isPublic            Boolean          @default(false)
  isDeleted           Boolean          @default(false)
  researchAreas       Json

  mainChairId String
  mainChair User @relation("ConferenceMainChair", fields: [mainChairId], references: [id])
  chairs     User[] @relation("ConferenceChairs")
  reviewers User[] @relation("ConferenceReviewers")

  Submission Submission[]
}

enum SubmissionStatus {
  DRAFT
  ACCEPTED
  REFUSED
  UNDER_REVIEW
  REVISION
}

model Submission {
  id                     String           @id @default(cuid())
  title                  String
  abstract               String
  keywords               Json
  paper_file_path        String?
  paper_file_name        String?
  camera_ready_file_path String?
  camera_ready_file_name String?
  primary_area           String
  secondary_areas        String
  submitted_by           String
  status                 SubmissionStatus @default(DRAFT)
  createdAt              DateTime         @default(now())
  updatedAt              DateTime         @updatedAt
  conferenceId           String
  conference             Conference       @relation(fields: [conferenceId], references: [id])
  user           User             @relation(fields: [submitted_by], references: [id])

  SubmissonAuthor SubmissonAuthor[]
}

model SubmissonAuthor {
  id              String   @id @default(cuid())
  firstName       String
  lastName        String
  email           String
  affiliation     String
  country         String
  submissionId    String
  submission      Submission @relation(fields: [submissionId], references: [id])
  isCorresponding Boolean
  createdAt       DateTime @default(now())

  userId String?
  user User? @relation("AuthorUser", fields: [userId], references: [id])
}